import{_ as c,c as a,o as i,a0 as o}from"./chunks/framework.1mQF75MJ.js";const m=JSON.parse('{"title":"Objectius","description":"","frontmatter":{},"headers":[],"relativePath":"objectius.md","filePath":"objectius.md"}'),r={name:"objectius.md"};function t(d,e,s,l,n,p){return i(),a("div",null,e[0]||(e[0]=[o('<h1 id="objectius" tabindex="-1">Objectius <a class="header-anchor" href="#objectius" aria-label="Permalink to &quot;Objectius&quot;">​</a></h1><ul><li>Comprendre què és una excepció en Java i per què apareix en temps d’execució</li><li>Conèixer la jerarquia <code>Throwable</code> → <code>Exception</code> → <code>Error</code></li><li>Saber llançar excepcions amb <code>throw</code> i declarar-les amb <code>throws</code> a la capçalera del mètode</li><li>Distingir entre excepcions comprovades (checked) i no comprovades (unchecked)</li><li>Manejar excepcions amb blocs <code>try</code>, <code>catch</code> i, opcionalment, <code>finally</code></li><li>Ordenar i seleccionar diversos blocs <code>catch</code> per a capturar diferents tipus d’excepcions</li><li>Utilitzar <code>getMessage()</code>, <code>printStackTrace()</code> i <code>toString()</code> per a obtenir informació de l’error</li><li>Valorar la definició d’excepcions pròpies per a situacions específiques de l’aplicació</li><li>Garantir que les excepcions es tracten adequadament per a no interrompre inesperadament el programa</li></ul>',2)]))}const _=c(r,[["render",t]]);export{m as __pageData,_ as default};
